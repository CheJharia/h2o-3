package water.parser;


import org.apache.hadoop.hive.ql.io.orc.Reader;
import org.apache.hadoop.hive.serde2.objectinspector.StructField;
import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
import org.junit.BeforeClass;
import org.junit.Test;
import water.TestUtil;
import water.fvec.Frame;

import java.util.List;
import java.util.Set;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static water.parser.orc.OrcUtil.isSupportedSchema;

/**
 * Test suite for orc parser.
 *
 * This test will attempt to perform multi-file parsing of a csv and orc file and compare
 * the frame summary statistics to make sure they are equivalent.
 *
 */
public class ParseTestMultiFileOrc extends TestUtil {

    private double EPSILON = 1e-9;
    private long ERRORMARGIN = 1000L;  // error margin when compare timestamp.
    int totalFilesTested = 0;
    int numberWrong = 0;

    private String csvDirectory = "bigdata/laptop/parser/orc/pubdev_3200/air05_csv";
    private String orcDirectory = "bigdata/laptop/parser/orc/pubdev_3200/air05_orc";

    @BeforeClass
    static public void setup() { TestUtil.stall_till_cloudsize(1); }

    @Test
    public void testParseMultiFileOrcs() {
        Frame csv_frame = parse_test_folder(csvDirectory, "\\N", 0, null);

        byte[] types = csv_frame.types();

        for (int index = 0; index < types.length; index++) {
            if (types[index] == 0)
                types[index] = 3;
        }

        Frame orc_frame = parse_test_folder(orcDirectory, null, 0, types);
        assertTrue(TestUtil.isIdenticalUpToRelTolerance(csv_frame,orc_frame,1e-5));

        csv_frame.delete();
        orc_frame.delete();
    }

    /**
     * This method will take one H2O frame generated by the Orc parser and the fileName of the Orc file
     * and attempt to compare the content of the Orc file to the H2O frame.  In particular, the following
     * are compared:
     * - column names;
     * - number of columns and rows;
     * - content of each row.
     *
     * If all comparison pass, the test will pass.  Otherwise, the test will fail.
     *
     * @param h2oFrame
     * @param orcReader
     */
    private void compareH2OFrame(String fileName, Set<String> failedFiles, Frame h2oFrame, Reader orcReader) {
        // grab column names, column and row numbers
        StructObjectInspector insp = (StructObjectInspector) orcReader.getObjectInspector();
        List<StructField> allColInfo = (List<StructField>) insp.getAllStructFieldRefs();    // get info of all cols

        // compare number of columns and rows
        int allColNumber = allColInfo.size();    // get and check column number
        boolean[] toInclude = new boolean[allColNumber+1];

        int colNumber = 0 ;
        int index1 = 0;
        for (StructField oneField:allColInfo) {
            String colType = oneField.getFieldObjectInspector().getTypeName();

            if (colType.toLowerCase().contains("decimal"))
                colType = "decimal";

            if (isSupportedSchema(colType)) {
                toInclude[index1 + 1] = true;
                colNumber++;
            }

            index1++;
        }

        assertEquals("Number of columns need to be the same: ", colNumber, h2oFrame.numCols());

        // compare column names
        String[] colNames = new String[colNumber];
        String[] colTypes = new String[colNumber];
        int colIndex = 0;

        for (int index = 0; index < allColNumber; index++) {   // get and check column names
            String typeName = allColInfo.get(index).getFieldObjectInspector().getTypeName();

            if (typeName.toLowerCase().contains("decimal"))
                typeName = "decimal";

            if (isSupportedSchema(typeName)) {
                colNames[colIndex] = allColInfo.get(index).getFieldName();
                colTypes[colIndex] = typeName;
                colIndex++;
            }
        }
        assertArrayEquals("Column names need to be the same: ", colNames, h2oFrame._names);


        Long totalRowNumber = orcReader.getNumberOfRows();    // get and check row number
        assertEquals("Number of rows need to be the same: ", totalRowNumber, (Long) h2oFrame.numRows());

    }






}